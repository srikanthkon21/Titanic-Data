import pandas as pd
import numpy as np
import random as rnd

# visualization
import seaborn as sns
import matplotlib.pyplot as plt

# machine learning
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC, LinearSVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import Perceptron
from sklearn.linear_model import SGDClassifier
from sklearn.tree import DecisionTreeClassifier

train  = pd.read_csv('/Users/Admin/Desktop/Data_Science_Cheet_Sheet/train.csv')
test = pd.read_csv('/Users/Admin/Desktop/Data_Science_Cheet_Sheet/test.csv')

train.shape, test.shape

train.describe()

test.describe()

train.describe(include=['O'])

test.describe(include=['O'])

train.head()

f,ax = plt.subplots(3,4,figsize=(20,16))
sns.countplot('Pclass',data=train,ax=ax[0,0])
sns.countplot('Sex',data=train,ax=ax[0,1])
sns.boxplot(x='Pclass',y='Age',data=train,ax=ax[0,2])
sns.countplot('SibSp',hue='Survived',data=train,ax=ax[0,3],palette='husl')
sns.distplot(train['Fare'].dropna(),ax=ax[2,0],kde=False,color='b')
sns.countplot('Embarked',data=train,ax=ax[2,2])

sns.countplot('Pclass',hue='Survived',data=train,ax=ax[1,0],palette='husl')
sns.countplot('Sex',hue='Survived',data=train,ax=ax[1,1],palette='husl')
sns.distplot(train[train['Survived']==0]['Age'].dropna(),ax=ax[1,2],kde=False,color='r',bins=5)
sns.distplot(train[train['Survived']==1]['Age'].dropna(),ax=ax[1,2],kde=False,color='g',bins=5)
sns.countplot('Parch',hue='Survived',data=train,ax=ax[1,3],palette='husl')
sns.swarmplot(x='Pclass',y='Fare',hue='Survived',data=train,palette='husl',ax=ax[2,1])
sns.countplot('Embarked',hue='Survived',data=train,ax=ax[2,3],palette='husl')

ax[0,0].set_title('Total Passengers by Class')
ax[0,1].set_title('Total Passengers by Gender')
ax[0,2].set_title('Age Box Plot By Class')
ax[0,3].set_title('Survival Rate by SibSp')
ax[1,0].set_title('Survival Rate by Class')
ax[1,1].set_title('Survival Rate by Gender')
ax[1,2].set_title('Survival Rate by Age')
ax[1,3].set_title('Survival Rate by Parch')
ax[2,0].set_title('Fare Distribution')
ax[2,1].set_title('Survival Rate by Fare and Pclass')
ax[2,2].set_title('Total Passengers by Embarked')
ax[2,3].set_title('Survival Rate by Embarked')

train['Cabin'].value_counts().head()

g = sns.FacetGrid(col='Embarked',data=train)
g.map(sns.pointplot,'Pclass','Survived','Sex',palette='viridis')
g.add_legend()

f,ax = plt.subplots(1,2,figsize=(15,3))
sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis',ax=ax[0])
sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis',ax=ax[1])

def fill_age(cols):
    Age = cols[0]
    PClass = cols[1]
    
    if pd.isnull(Age):
        if PClass == 1:
            return 37
        elif PClass == 2:
            return 29
        else:
            return 24
    else:
        return Age
        
train['Age'] = train[['Age','Pclass']].apply(fill_age,axis=1)
test['Age'] = test[['Age','Pclass']].apply(fill_age,axis=1)

test['Fare'].fillna(stat.mode(test['Fare']),inplace=True)
train['Embarked'].fillna('S',inplace=True)
train['Cabin'].fillna('No Cabin',inplace=True)
test['Cabin'].fillna('No Cabin',inplace=True)

f,ax = plt.subplots(1,2,figsize=(15,3))
sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis',ax=ax[0])
sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis',ax=ax[1])

train.drop('Ticket',axis=1,inplace=True)
test.drop('Ticket',axis=1,inplace=True)

train.head()


train['IsTrain'] = 1
test['IsTrain'] = 0
df = pd.concat([train,test])

df['Title'] = df['Name'].str.split(', ').str[1].str.split('.').str[0]
df['Title'].value_counts()

df['Title'].replace('Mme','Mrs',inplace=True)
df['Title'].replace(['Ms','Mlle'],'Miss',inplace=True)
df['Title'].replace(['Dr','Rev','Col','Major','Dona','Don','Sir','Lady','Jonkheer','Capt','the Countess'],'Others',inplace=True)
df['Title'].value_counts()

df.drop('Name',axis=1,inplace=True)
df.head()

sns.distplot(df['Age'],bins=5)

df['AgeGroup'] = df['Age']
df.loc[df['AgeGroup']<=19, 'AgeGroup'] = 0
df.loc[(df['AgeGroup']>19) & (df['AgeGroup']<=30), 'AgeGroup'] = 1
df.loc[(df['AgeGroup']>30) & (df['AgeGroup']<=45), 'AgeGroup'] = 2
df.loc[(df['AgeGroup']>45) & (df['AgeGroup']<=63), 'AgeGroup'] = 3
df.loc[df['AgeGroup']>63, 'AgeGroup'] = 4

df.drop('Age',axis=1,inplace=True)
df.head()

df['FamilySize'] = df['SibSp'] + df['Parch'] + 1 #himself
df['IsAlone'] = 0
df.loc[df['FamilySize']==1, 'IsAlone'] = 1


f,ax = plt.subplots(1,2,figsize=(15,6))
sns.countplot(df[df['IsTrain']==1]['FamilySize'],hue=train['Survived'],ax=ax[0],palette='husl')
sns.countplot(df[df['IsTrain']==1]['IsAlone'],hue=train['Survived'],ax=ax[1],palette='husl')


df.drop(['SibSp','Parch','FamilySize'],axis=1,inplace=True)
df.head()

f,ax = plt.subplots(1,2,figsize=(16,4))
sns.distplot(df['Fare'],bins=10,ax=ax[0])
sns.swarmplot(x='Pclass',y='Fare',data=df[df['IsTrain']==1],hue='Survived',ax=ax[1],palette='husl')

df['FareGroup'] = df['Fare']
df.loc[df['FareGroup']<=50,'FareGroup'] = 0
df.loc[(df['FareGroup']>50) & (df['FareGroup']<=100),'FareGroup'] = 1
df.loc[(df['FareGroup']>100) & (df['FareGroup']<=200),'FareGroup'] = 2
df.loc[(df['FareGroup']>200) & (df['FareGroup']<=300),'FareGroup'] = 3
df.loc[df['FareGroup']>30,'FareGroup'] = 4

sns.countplot('FareGroup',data=df[df['IsTrain']==1],hue='Survived',palette='husl')

df.drop('Fare',axis=1,inplace=True)
df.head()

df['Deck'] = df['Cabin']
df.loc[df['Deck']!='No Cabin','Deck'] = df[df['Cabin']!='No Cabin']['Cabin'].str.split().apply(lambda x: np.sort(x)).str[0].str[0]
df.loc[df['Deck']=='No Cabin','Deck'] = 'N/A'

sns.countplot(x='Deck',hue='Survived',data=df[df['IsTrain']==1],palette='husl')

df.drop('Cabin',axis=1,inplace=True)
df.head()

def process_dummies(df,cols):
    for col in cols:
        dummies = pd.get_dummies(df[col],prefix=col,drop_first=True)
        df = pd.concat([df.drop(col,axis=1),dummies],axis=1)
    return df
    
df = process_dummies(df,['Embarked','Sex','Pclass','Title','AgeGroup','FareGroup','Deck'])

df.head()

dataset = df[df['IsTrain']==1]
dataset.drop(['IsTrain','PassengerId'],axis=1,inplace=True)
holdout = df[df['IsTrain']==0]
test_id = holdout['PassengerId']
holdout.drop(['IsTrain','PassengerId','Survived'],axis=1,inplace=True)

X = dataset.drop(['Survived'],axis=1)
y = dataset['Survived'].astype('int')
X_train, X_test, y_train, y_test = train_test_split(X,y,random_state=42)

svc = SVC()
rfc = RandomForestClassifier()
lgr = LogisticRegression()

kfold = KFold(n_splits=10, random_state=7)
print('SVM Classifier: ',cross_val_score(svc, X_train, y_train, cv=kfold).mean()*100)
print('Random Forest: ',cross_val_score(rfc, X_train, y_train, cv=kfold).mean()*100)
print('Logistic Regression: ',cross_val_score(lgr, X_train, y_train, cv=kfold).mean()*100)

xgb = XGBClassifier(n_estimators=500)
xgb.fit(X,y)
predictions = xgb.predict(holdout)

submission = pd.DataFrame({
    'PassengerId': test_id,
    'Survived': predictions
})

submission.to_csv('submission.csv',index=False)
















